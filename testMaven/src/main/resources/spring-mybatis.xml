<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
        http://www.springframework.org/schema/aop  
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-4.1.xsd">  
    <!-- 1.自动扫描 -->  
    <context:component-scan base-package="testMaven.com.qian" />  
    <!-- 2.引入配置文件,加载数据资源属性文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">
	       <list>
	            <value>classpath:jdbc.properties</value>
	            <value>classpath:redis.properties</value>
	        </list> 
	    </property>
    </bean>  
  	<!-- 3. 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <property name="url" value="${jdbc.url.write}" />  
        <property name="username" value="${jdbc.username.write}" />  
        <property name="password" value="${jdbc.password.write}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${jdbc.initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${jdbc.maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${jdbc.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${jdbc.maxWait}"></property>  
    </bean>  
  
    <!-- 4.spring和MyBatis完美整合，不需要mybatis的配置映射文件 sessionfactory  -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:testMaven/com/qian/mapper/*.xml"></property> 
        <property name="configLocation" value="classpath:myBatis.xml"/> <!-- 配置redis缓存 -->
    </bean>  
  
    <!-- 5.装配DAO接口,DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="testMaven.com.qian.dao" />  <!-- value:DAO接口所在包名，Spring会自动查找其下的类 -->  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- 6.(事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
   <!-- 7、注解事务切面 -->
   <tx:annotation-driven transaction-manager="transactionManager"/>  
   
   <!-- ****************************************redis配置启动配置  start******************************************* -->
    <!-- redis数据源 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />  
	    <property name="maxTotal" value="${redis.maxActive}" />  
	    <property name="maxWaitMillis" value="${redis.maxWait}" />  
	    <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>
    
    <!-- redis连接池配置，类似数据库连接池 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="password" value="${redis.pass}"></property>
        <!-- redis默认共有16个库，使用配置使用几号库，默认使用的是0号库 -->
        <property name="database" value="${redis.database}"></property>
        <property name="poolConfig"  ref="poolConfig"></property> 
    </bean>
    
    <!-- 调用redis连接池工厂配置 -->
    <bean id="redisTemplate" class=" org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"></property>
       <!--  如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast   
        to String！！！   -->
         <property name="keySerializer">  
            <bean  
            class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property> 
    </bean>

	<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
	<bean id="redisCacheTransfer" class="testMaven.com.qian.util.redisCache.RedisCacheTransfer">
	    <property name="jedisConnectionFactory" ref="connectionFactory"/>
	</bean>
	
   <!-- *****************************************redis配置启动配置  end****************************************** -->
</beans>  